package com.habitTracker.backend;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@CrossOrigin(origins = "http://localhost:5173")
@Controller // This means that this class is a Controller
@RequestMapping(path="/froget") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private HabitRepository habitRepository;

  @Autowired
  private MoodRepository moodRepository;

//  @PostMapping(path="/users/add") // Map ONLY POST Requests
//  public @ResponseBody String addNewUser (@RequestParam String username,
//                                          @RequestParam String email,
//                                          @RequestParam String password) {
//    // @ResponseBody means the returned String is the response, not a view name
//    // @RequestParam means it is a parameter from the GET or POST request
//
//    User n = new User();
//    n.setName(username);
//    n.setEmail(email);
//    n.setPassword(password);
//    userRepository.save(n);
//    return "New user added";
//  }

  @PostMapping(path="/users/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser(@RequestBody Map<String, String> userData) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestBody is used to deserialize the JSON request body into a Map

    User n = new User();
    n.setName(userData.get("username"));
    n.setEmail(userData.get("email"));
    n.setPassword(userData.get("password"));
    userRepository.save(n);
    return "New user added";
  }

//  @PostMapping(path="/habits/add")
//  public @ResponseBody String addNewHabit (@RequestParam String habit_name,
//                                           @RequestParam String habit_desc,
//                                           @RequestParam String icon,
//                                           @RequestParam String color,
//                                           @RequestParam String habit_type,
//                                           @RequestParam String goal,
//                                           @RequestParam String start_date,
//                                           @RequestParam String end_date) {
//    Habit h = new Habit();
//    h.setHabit_name(habit_name);
//    h.setHabit_desc(habit_desc);
//    h.setIcon(icon);
//    h.setColor(color);
//    h.setHabit_type(habit_type);
//    h.setGoal(goal);
//    h.setStartDate(start_date);
//    h.setEndDate(end_date);
//    habitRepository.save(h);
//    return "Habit saved";
//  }

  @PostMapping(path="/habits/add")
  public @ResponseBody String addNewHabit(@RequestBody Map<String, String> habitData) {
    Habit h = new Habit();
    h.setHabit_name(habitData.get("habit_name"));
    h.setHabit_desc(habitData.get("habit_desc"));
    h.setIcon(habitData.get("icon"));
    h.setColor(habitData.get("color"));
    h.setHabit_type(habitData.get("habit_type"));
    h.setGoal(habitData.get("goal"));
    h.setPer(habitData.get("per"));
    h.setStartDate(habitData.get("start_date"));
    h.setEndDate(habitData.get("end_date"));
    habitRepository.save(h);
    return "Habit saved";
  }

  @PostMapping(path="/moods/add")
  public @ResponseBody String addNewMood(@RequestBody Map<String, String> moodData) {
    Mood m = new Mood();
    m.setMood_date(moodData.get("mood_date"));
    m.setMood(moodData.get("mood"));
    m.setReason(moodData.get("reason"));
    m.setNote(moodData.get("note"));
    moodRepository.save(m);
    return "Mood saved";
  }

  @GetMapping(path="/users/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    System.out.println(userRepository);
    return userRepository.findAll();
  }

  @GetMapping(path="/habits/all")
  public @ResponseBody Iterable<Habit> getAllHabits() {
    return habitRepository.findAll();
  }

  @GetMapping(path="/moods/all")
  public @ResponseBody Iterable<Mood> getAllMoods() { return moodRepository.findAll();
  }


}
